{"version":3,"file":"PtonV2.js","sources":["../../../../src/contracts/pTON/v2/PtonV2.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"@/types\";\nimport { toAddress } from \"@/utils/toAddress\";\n\nimport { pTON_VERSION, pTON_OP_CODES } from \"../constants\";\nimport { PtonV1, type PtonV1Options } from \"../v1/PtonV1\";\n\nexport interface PtonV2Options extends PtonV1Options {\n  gasConstants?: Partial<typeof PtonV2.gasConstants>;\n}\n\nexport class PtonV2 extends PtonV1 {\n  public static readonly version = pTON_VERSION.v2;\n\n  public static readonly gasConstants = {\n    tonTransfer: toNano(\"0.01\"),\n    deployWallet: toNano(\"0.1\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: PtonV2Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...PtonV2.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createTonTransferBody(params: {\n    tonAmount: AmountType;\n    refundAddress: AddressType;\n    forwardPayload?: Cell;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    const builder = beginCell();\n\n    builder.storeUint(pTON_OP_CODES.TON_TRANSFER, 32);\n    builder.storeUint(params.queryId ?? 0, 64);\n    builder.storeCoins(BigInt(params.tonAmount));\n    builder.storeAddress(toAddress(params.refundAddress));\n\n    if (params.forwardPayload) {\n      builder.storeBit(true);\n      builder.storeRef(params.forwardPayload);\n    }\n\n    return builder.endCell();\n  }\n\n  public async getTonTransferTxParams(\n    provider: ContractProvider,\n    params: {\n      tonAmount: AmountType;\n      destinationAddress: AddressType;\n      refundAddress: AddressType;\n      forwardPayload?: Cell;\n      forwardTonAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = await this.getWalletAddress(provider, params.destinationAddress);\n\n    const body = await this.createTonTransferBody({\n      tonAmount: params.tonAmount,\n      refundAddress: params.refundAddress,\n      forwardPayload: params.forwardPayload,\n      queryId: params.queryId,\n    });\n\n    const value =\n      BigInt(params.tonAmount) +\n      BigInt(params.forwardTonAmount ?? 0) +\n      BigInt(this.gasConstants.tonTransfer);\n\n    return { to, value, body };\n  }\n\n  public async sendTonTransfer(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<PtonV2[\"getTonTransferTxParams\"]>[1],\n  ) {\n    const txParams = await this.getTonTransferTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public override async createDeployWalletBody(params: {\n    ownerAddress: AddressType;\n    excessAddress: AddressType;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(pTON_OP_CODES.DEPLOY_WALLET_V2, 32)\n      .storeUint(params.queryId ?? 0, 64)\n      .storeAddress(toAddress(params.ownerAddress))\n      .storeAddress(toAddress(params.excessAddress))\n      .endCell();\n  }\n\n  public override async getDeployWalletTxParams(\n    provider: ContractProvider,\n    params: {\n      ownerAddress: AddressType;\n      excessAddress?: AddressType;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDeployWalletBody({\n      ownerAddress: params.ownerAddress,\n      excessAddress: params.excessAddress ?? params.ownerAddress,\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.deployWallet);\n\n    return { to, value, body };\n  }\n\n  public override async sendDeployWallet(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<PtonV2[\"getDeployWalletTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDeployWalletTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n}\n"],"names":["_PtonV2"],"mappings":";;;;AAmBO,MAAM,UAAN,MAAMA,iBAAe,OAAO;AAAA,EAUjC,YACE,SACA,EAAE,cAAc,GAAG,QAAQ,IAAmB,CAAA,GAC9C;AACA,UAAM,SAAS,OAAO;AAEtB,SAAK,eAAe;AAAA,MAClB,GAAGA,SAAO;AAAA,MACV,GAAG;AAAA,IAAA;AAAA,EAEP;AAAA,EAEA,MAAa,sBAAsB,QAKjB;AAChB,UAAM,UAAU;AAER,YAAA,UAAU,cAAc,cAAc,EAAE;AAChD,YAAQ,UAAU,OAAO,WAAW,GAAG,EAAE;AACzC,YAAQ,WAAW,OAAO,OAAO,SAAS,CAAC;AAC3C,YAAQ,aAAa,UAAU,OAAO,aAAa,CAAC;AAEpD,QAAI,OAAO,gBAAgB;AACzB,cAAQ,SAAS,IAAI;AACb,cAAA,SAAS,OAAO,cAAc;AAAA,IACxC;AAEA,WAAO,QAAQ;EACjB;AAAA,EAEA,MAAa,uBACX,UACA,QAQ0B;AAC1B,UAAM,KAAK,MAAM,KAAK,iBAAiB,UAAU,OAAO,kBAAkB;AAEpE,UAAA,OAAO,MAAM,KAAK,sBAAsB;AAAA,MAC5C,WAAW,OAAO;AAAA,MAClB,eAAe,OAAO;AAAA,MACtB,gBAAgB,OAAO;AAAA,MACvB,SAAS,OAAO;AAAA,IAAA,CACjB;AAED,UAAM,QACJ,OAAO,OAAO,SAAS,IACvB,OAAO,OAAO,oBAAoB,CAAC,IACnC,OAAO,KAAK,aAAa,WAAW;AAE/B,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAa,gBACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,uBAAuB,UAAU,MAAM;AAE5D,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA,EAEA,MAAsB,uBAAuB,QAI3B;AACT,WAAA,UACJ,EAAA,UAAU,cAAc,kBAAkB,EAAE,EAC5C,UAAU,OAAO,WAAW,GAAG,EAAE,EACjC,aAAa,UAAU,OAAO,YAAY,CAAC,EAC3C,aAAa,UAAU,OAAO,aAAa,CAAC,EAC5C,QAAQ;AAAA,EACb;AAAA,EAEA,MAAsB,wBACpB,UACA,QAM0B;AAC1B,UAAM,KAAK,KAAK;AAEV,UAAA,OAAO,MAAM,KAAK,uBAAuB;AAAA,MAC7C,cAAc,OAAO;AAAA,MACrB,eAAe,OAAO,iBAAiB,OAAO;AAAA,MAC9C,SAAS,iCAAQ;AAAA,IAAA,CAClB;AAED,UAAM,QAAQ,QAAO,iCAAQ,cAAa,KAAK,aAAa,YAAY;AAEjE,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAsB,iBACpB,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,wBAAwB,UAAU,MAAM;AAE7D,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AACF;AA7Ha,QACY,UAAU,aAAa;AADnC,QAGY,eAAe;AAAA,EACpC,aAAa,OAAO,MAAM;AAAA,EAC1B,cAAc,OAAO,KAAK;AAC5B;AANK,IAAM,SAAN;"}