{"version":3,"file":"PtonV1.cjs","sources":["../../../../src/contracts/pTON/v1/PtonV1.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  address,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { ContractOptions } from \"@/contracts/core/Contract\";\nimport { JettonMinter } from \"@/contracts/core/JettonMinter\";\nimport type { AddressType, AmountType, QueryIdType } from \"@/types\";\nimport { createJettonTransferMessage } from \"@/utils/createJettonTransferMessage\";\nimport { toAddress } from \"@/utils/toAddress\";\n\nimport { pTON_OP_CODES, pTON_VERSION } from \"../constants\";\n\nexport interface PtonV1Options extends ContractOptions {\n  gasConstants?: Partial<typeof PtonV1.gasConstants>;\n}\n\nexport class PtonV1 extends JettonMinter {\n  public static readonly version: pTON_VERSION = pTON_VERSION.v1;\n\n  public static readonly address = address(\n    \"EQCM3B12QK1e4yZSf8GtBRT0aLMNyEsBc_DhVfRRtOEffLez\",\n  );\n\n  public static readonly gasConstants = {\n    deployWallet: toNano(\"1.05\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType = PtonV1.address,\n    { gasConstants, ...options }: PtonV1Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...PtonV1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async getTonTransferTxParams(\n    provider: ContractProvider,\n    params: {\n      tonAmount: AmountType;\n      destinationAddress: AddressType;\n      refundAddress: AddressType;\n      forwardPayload?: Cell;\n      forwardTonAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = await this.getWalletAddress(provider, params.destinationAddress);\n\n    const body = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.tonAmount,\n      destination: params.destinationAddress,\n      forwardTonAmount: BigInt(params.forwardTonAmount ?? 0),\n      forwardPayload: params.forwardPayload,\n    });\n\n    const value =\n      BigInt(params.tonAmount) + BigInt(params.forwardTonAmount ?? 0);\n\n    return { to, value, body };\n  }\n\n  public async sendTonTransfer(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<PtonV1[\"getTonTransferTxParams\"]>[1],\n  ) {\n    const txParams = await this.getTonTransferTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createDeployWalletBody(params: {\n    ownerAddress: AddressType;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(pTON_OP_CODES.DEPLOY_WALLET_V1, 32)\n      .storeUint(params.queryId ?? 0, 64)\n      .storeAddress(toAddress(params.ownerAddress))\n      .endCell();\n  }\n\n  public async getDeployWalletTxParams(\n    provider: ContractProvider,\n    params: {\n      ownerAddress: AddressType;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDeployWalletBody({\n      ownerAddress: params.ownerAddress,\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.deployWallet);\n\n    return { to, value, body };\n  }\n\n  public async sendDeployWallet(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<PtonV1[\"getDeployWalletTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDeployWalletTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n}\n"],"names":["_PtonV1","JettonMinter","address","createJettonTransferMessage","beginCell","pTON_OP_CODES","toAddress","pTON_VERSION","toNano"],"mappings":";;;;;;;AAsBO,MAAM,UAAN,MAAMA,iBAAeC,0BAAa;AAAA,EAavC,YACEC,WAAuBF,SAAO,SAC9B,EAAE,cAAc,GAAG,QAA2B,IAAA,IAC9C;AACA,UAAME,UAAS,OAAO;AAEtB,SAAK,eAAe;AAAA,MAClB,GAAGF,SAAO;AAAA,MACV,GAAG;AAAA,IAAA;AAAA,EAEP;AAAA,EAEA,MAAa,uBACX,UACA,QAQ0B;AAC1B,UAAM,KAAK,MAAM,KAAK,iBAAiB,UAAU,OAAO,kBAAkB;AAE1E,UAAM,OAAOG,4BAAAA,4BAA4B;AAAA,MACvC,SAAS,OAAO,WAAW;AAAA,MAC3B,QAAQ,OAAO;AAAA,MACf,aAAa,OAAO;AAAA,MACpB,kBAAkB,OAAO,OAAO,oBAAoB,CAAC;AAAA,MACrD,gBAAgB,OAAO;AAAA,IAAA,CACxB;AAEK,UAAA,QACJ,OAAO,OAAO,SAAS,IAAI,OAAO,OAAO,oBAAoB,CAAC;AAEzD,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAa,gBACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,uBAAuB,UAAU,MAAM;AAE5D,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA,EAEA,MAAa,uBAAuB,QAGlB;AAChB,WAAOC,gBACJ,UAAUC,wBAAc,kBAAkB,EAAE,EAC5C,UAAU,OAAO,WAAW,GAAG,EAAE,EACjC,aAAaC,UAAA,UAAU,OAAO,YAAY,CAAC,EAC3C;EACL;AAAA,EAEA,MAAa,wBACX,UACA,QAK0B;AAC1B,UAAM,KAAK,KAAK;AAEV,UAAA,OAAO,MAAM,KAAK,uBAAuB;AAAA,MAC7C,cAAc,OAAO;AAAA,MACrB,SAAS,iCAAQ;AAAA,IAAA,CAClB;AAED,UAAM,QAAQ,QAAO,iCAAQ,cAAa,KAAK,aAAa,YAAY;AAEjE,WAAA,EAAE,IAAI,OAAO;EACtB;AAAA,EAEA,MAAa,iBACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,wBAAwB,UAAU,MAAM;AAE7D,WAAA,IAAI,KAAK,QAAQ;AAAA,EAC1B;AACF;AAtGa,QACY,UAAwBC,UAAa,aAAA;AADjD,QAGY,UAAUL,IAAA;AAAA,EAC/B;AACF;AALW,QAOY,eAAe;AAAA,EACpC,cAAcM,WAAO,MAAM;AAC7B;AATK,IAAM,SAAN;;"}